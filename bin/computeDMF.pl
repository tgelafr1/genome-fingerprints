use strict;
use List::Util qw(min);
use List::Util qw(max);
my $version = '181217';
####
#
# This software computes a genome fingerprint for a single personal genome.
# The method is described in:
#    Glusman G, Mauldin DE, Hood LE, Robinson M. Ultrafast Comparison of Personal
#    Genomes via Precomputed Genome Fingerprints. Front Genet. 2017 Sep 26;8:136. doi:
#    10.3389/fgene.2017.00136. eCollection 2017. PubMed PMID: 29018478; PubMed Central
#    PMCID: PMC5623000.
# 
# Copyright 2017 by Gustavo Glusman, Institute for Systems Biology, Seattle, WA, USA.
# It is provided by the Institute for Systems Biology as open source software,
# free for non-commercial use.
# See the accompanying LICENSE file for information about the governing license.
#
####
#
# Accepted input formats include VCF, BCF, RCF (ISB's range call format), and Complete Genomics' var and masterVar formats.
# The first parameter is an 'id' for the job; output files will use this as base. You can include in it a path to where you want the output files to be located.
# The second parameter is the input file (the genome as VCF, RCF, var or masterVar).
# The third (optional) parameter is the format of the input file: 'vcf', 'bcf', 'rcf', 'var' or 'masterVar'. Defaults to 'vcf'.
# The fourth (optional) parameter is the fingerprint size. Multiple sizes can be specified, comma-delimited. Defaults to including several sizes.
# The fifth (optional) parameter is the distance between consecutive SNVs that are considered 'too close'. Default is 20.
# The sixth (optional) parameter is a bed file specifying regions of interest to be included in the analysis. For example, one could specify the definition of exome segments to compute an exome-compatible fingerprint from whole-genome data. This is available only for VCF and RCF input.
#
####
#
# Examples of usage:
#   computeDMF.pl myGenome vcfs/myGenome.vcf.gz
#   computeDMF.pl fingerprints/anotherGenome vcfs/aGenome.vcf.gz vcf 5,20,120 20 exomeRegions.bed
#
####

# Set default values for missing inputs (vls is Ls to try, 20 is the default C,
# and vcf is the default format)
my($id, $file, $dist, $format, $L, $C, $bedmask) = @ARGV;
my @vls = (5, 7, 11, 13, 17, 19, 20, 40, 50, 80, 100, 120, 200);
@vls = split /,/, $L if $L;	
$C ||= 20;
$format ||= 'vcf';
$dist ||= 'mean';
my @keys = qw/ACACAC ACCAT ACACAG ACACCA ACACCT ACACCG ACACTA ACACTC ACACTG ACACGA ACACGC ACACGT ACATAC ACATAT ACATAG ACATCA ACATCT ACATCG ACATTA ACATTC ACATTG ACATGA ACATGC ACATGT ACAGAC ACAGAT ACAGAG ACAGCA ACAGCT ACAGCG ACAGTA ACAGTC ACAGTG ACAGGA ACAGGC ACAGGT ACCAAC ACCAAT ACCAAG ACCACA ACCACT ACCACG ACCATA ACCATC ACCATG ACCAGA ACCAGC ACCAGT ACCTAC ACCTAT ACCTAG ACCTCA ACCTCT ACCTCG ACCTTA ACCTTC ACCTTG ACCTGA ACCTGC ACCTGT ACCGAC ACCGAT ACCGAG ACCGCA ACCGCT ACCGCG ACCGTA ACCGTC ACCGTG ACCGGA ACCGGC ACCGGT ACTAAC ACTAAT ACTAAG ACTACA ACTACT ACTACG ACTATA ACTATC ACTATG ACTAGA ACTAGC ACTAGT ACTCAC ACTCAT ACTCAG ACTCCA ACTCCT ACTCCG ACTCTA ACTCTC ACTCTG ACTCGA ACTCGC ACTCGT ACTGAC ACTGAT ACTGAG ACTGCA ACTGCT ACTGCG ACTGTA ACTGTC ACTGTG ACTGGA ACTGGC ACTGGT ACGAAC ACGAAT ACGAAG ACGACA ACGACT ACGACG ACGATA ACGATC ACGATG ACGAGA ACGAGC ACGAGT ACGCAC ACGCAT ACGCAG ACGCCA ACGCCT ACGCCG ACGCTA ACGCTC ACGCTG ACGCGA ACGCGC ACGCGT ACGTAC ACGTAT ACGTAG ACGTCA ACGTCT ACGTCG ACGTTA ACGTTC ACGTTG ACGTGA ACGTGC ACGTGT ATACAC ATACAT ATACAG ATACCA ATACCT ATACCG ATACTA ATACTC ATACTG ATACGA ATACGC ATACGT ATATAC ATATAT ATATAG ATATCA ATATCT ATATCG ATATTA ATATTC ATATTG ATATGA ATATGC ATATGT ATAGAC ATAGAT ATAGAG ATAGCA ATAGCT ATAGCG ATAGTA ATAGTC ATAGTG ATAGGA ATAGGC ATAGGT ATCAAC ATCAAT ATCAAG ATCACA ATCACT ATCACG ATCATA ATCATC ATCATG ATCAGA ATCAGC ATCAGT ATCTAC ATCTAT ATCTAG ATCTCA ATCTCT ATCTCG ATCTTA ATCTTC ATCTTG ATCTGA ATCTGC ATCTGT ATCGAC ATCGAT ATCGAG ATCGCA ATCGCT ATCGCG ATCGTA ATCGTC ATCGTG ATCGGA ATCGGC ATCGGT ATTAAC ATTAAT ATTAAG ATTACA ATTACT ATTACG ATTATA ATTATC ATTATG ATTAGA ATTAGC ATTAGT ATTCAC ATTCAT ATTCAG ATTCCA ATTCCT ATTCCG ATTCTA ATTCTC ATTCTG ATTCGA ATTCGC ATTCGT ATTGAC ATTGAT ATTGAG ATTGCA ATTGCT ATTGCG ATTGTA ATTGTC ATTGTG ATTGGA ATTGGC ATTGGT ATGAAC ATGAAT ATGAAG ATGACA ATGACT ATGACG ATGATA ATGATC ATGATG ATGAGA ATGAGC ATGAGT ATGCAC ATGCAT ATGCAG ATGCCA ATGCCT ATGCCG ATGCTA ATGCTC ATGCTG ATGCGA ATGCGC ATGCGT ATGTAC ATGTAT ATGTAG ATGTCA ATGTCT ATGTCG ATGTTA ATGTTC ATGTTG ATGTGA ATGTGC ATGTGT AGACAC AGACAT AGACAG AGACCA AGACCT AGACCG AGACTA AGACTC AGACTG AGACGA AGACGC AGACGT AGATAC AGATAT AGATAG AGATCA AGATCT AGATCG AGATTA AGATTC AGATTG AGATGA AGATGC AGATGT AGAGAC AGAGAT AGAGAG AGAGCA AGAGCT AGAGCG AGAGTA AGAGTC AGAGTG AGAGGA AGAGGC AGAGGT AGCAAC AGCAAT AGCAAG AGCACA AGCACT AGCACG AGCATA AGCATC AGCATG AGCAGA AGCAGC AGCAGT AGCTAC AGCTAT AGCTAG AGCTCA AGCTCT AGCTCG AGCTTA AGCTTC AGCTTG AGCTGA AGCTGC AGCTGT AGCGAC AGCGAT AGCGAG AGCGCA AGCGCT AGCGCG AGCGTA AGCGTC AGCGTG AGCGGA AGCGGC AGCGGT AGTAAC AGTAAT AGTAAG AGTACA AGTACT AGTACG AGTATA AGTATC AGTATG AGTAGA AGTAGC AGTAGT AGTCAC AGTCAT AGTCAG AGTCCA AGTCCT AGTCCG AGTCTA AGTCTC AGTCTG AGTCGA AGTCGC AGTCGT AGTGAC AGTGAT AGTGAG AGTGCA AGTGCT AGTGCG AGTGTA AGTGTC AGTGTG AGTGGA AGTGGC AGTGGT AGGAAC AGGAAT AGGAAG AGGACA AGGACT AGGACG AGGATA AGGATC AGGATG AGGAGA AGGAGC AGGAGT AGGCAC AGGCAT AGGCAG AGGCCA AGGCCT AGGCCG AGGCTA AGGCTC AGGCTG AGGCGA AGGCGC AGGCGT AGGTAC AGGTAT AGGTAG AGGTCA AGGTCT AGGTCG AGGTTA AGGTTC AGGTTG AGGTGA AGGTGC AGGTGT CAACAC CAACAT CAACAG CAACCA CAACCT CAACCG CAACTA CAACTC CAACTG CAACGA CAACGC CAACGT CAATAC CAATAT CAATAG CAATCA CAATCT CAATCG CAATTA CAATTC CAATTG CAATGA CAATGC CAATGT CAAGAC CAAGAT CAAGAG CAAGCA CAAGCT CAAGCG CAAGTA CAAGTC CAAGTG CAAGGA CAAGGC CAAGGT CACAAC CACAAT CACAAG CACACA CACACT CACACG CACATA CACATC CACATG CACAGA CACAGC CACAGT CACTAC CACTAT CACTAG CACTCA CACTCT CACTCG CACTTA CACTTC CACTTG CACTGA CACTGC CACTGT CACGAC CACGAT CACGAG CACGCA CACGCT CACGCG CACGTA CACGTC CACGTG CACGGA CACGGC CACGGT CATAAC CATAAT CATAAG CATACA CATACT CATACG CATATA CATATC CATATG CATAGA CATAGC CATAGT CATCAC CATCAT CATCAG CATCCA CATCCT CATCCG CATCTA CATCTC CATCTG CATCGA CATCGC CATCGT CATGAC CATGAT CATGAG CATGCA CATGCT CATGCG CATGTA CATGTC CATGTG CATGGA CATGGC CATGGT CAGAAC CAGAAT CAGAAG CAGACA CAGACT CAGACG CAGATA CAGATC CAGATG CAGAGA CAGAGC CAGAGT CAGCAC CAGCAT CAGCAG CAGCCA CAGCCT CAGCCG CAGCTA CAGCTC CAGCTG CAGCGA CAGCGC CAGCGT CAGTAC CAGTAT CAGTAG CAGTCA CAGTCT CAGTCG CAGTTA CAGTTC CAGTTG CAGTGA CAGTGC CAGTGT CTACAC CTACAT CTACAG CTACCA CTACCT CTACCG CTACTA CTACTC CTACTG CTACGA CTACGC CTACGT CTATAC CTATAT CTATAG CTATCA CTATCT CTATCG CTATTA CTATTC CTATTG CTATGA CTATGC CTATGT CTAGAC CTAGAT CTAGAG CTAGCA CTAGCT CTAGCG CTAGTA CTAGTC CTAGTG CTAGGA CTAGGC CTAGGT CTCAAC CTCAAT CTCAAG CTCACA CTCACT CTCACG CTCATA CTCATC CTCATG CTCAGA CTCAGC CTCAGT CTCTAC CTCTAT CTCTAG CTCTCA CTCTCT CTCTCG CTCTTA CTCTTC CTCTTG CTCTGA CTCTGC CTCTGT CTCGAC CTCGAT CTCGAG CTCGCA CTCGCT CTCGCG CTCGTA CTCGTC CTCGTG CTCGGA CTCGGC CTCGGT CTTAAC CTTAAT CTTAAG CTTACA CTTACT CTTACG CTTATA CTTATC CTTATG CTTAGA CTTAGC CTTAGT CTTCAC CTTCAT CTTCAG CTTCCA CTTCCT CTTCCG CTTCTA CTTCTC CTTCTG CTTCGA CTTCGC CTTCGT CTTGAC CTTGAT CTTGAG CTTGCA CTTGCT CTTGCG CTTGTA CTTGTC CTTGTG CTTGGA CTTGGC CTTGGT CTGAAC CTGAAT CTGAAG CTGACA CTGACT CTGACG CTGATA CTGATC CTGATG CTGAGA CTGAGC CTGAGT CTGCAC CTGCAT CTGCAG CTGCCA CTGCCT CTGCCG CTGCTA CTGCTC CTGCTG CTGCGA CTGCGC CTGCGT CTGTAC CTGTAT CTGTAG CTGTCA CTGTCT CTGTCG CTGTTA CTGTTC CTGTTG CTGTGA CTGTGC CTGTGT CGACAC CGACAT CGACAG CGACCA CGACCT CGACCG CGACTA CGACTC CGACTG CGACGA CGACGC CGACGT CGATAC CGATAT CGATAG CGATCA CGATCT CGATCG CGATTA CGATTC CGATTG CGATGA CGATGC CGATGT CGAGAC CGAGAT CGAGAG CGAGCA CGAGCT CGAGCG CGAGTA CGAGTC CGAGTG CGAGGA CGAGGC CGAGGT CGCAAC CGCAAT CGCAAG CGCACA CGCACT CGCACG CGCATA CGCATC CGCATG CGCAGA CGCAGC CGCAGT CGCTAC CGCTAT CGCTAG CGCTCA CGCTCT CGCTCG CGCTTA CGCTTC CGCTTG CGCTGA CGCTGC CGCTGT CGCGAC CGCGAT CGCGAG CGCGCA CGCGCT CGCGCG CGCGTA CGCGTC CGCGTG CGCGGA CGCGGC CGCGGT CGTAAC CGTAAT CGTAAG CGTACA CGTACT CGTACG CGTATA CGTATC CGTATG CGTAGA CGTAGC CGTAGT CGTCAC CGTCAT CGTCAG CGTCCA CGTCCT CGTCCG CGTCTA CGTCTC CGTCTG CGTCGA CGTCGC CGTCGT CGTGAC CGTGAT CGTGAG CGTGCA CGTGCT CGTGCG CGTGTA CGTGTC CGTGTG CGTGGA CGTGGC CGTGGT CGGAAC CGGAAT CGGAAG CGGACA CGGACT CGGACG CGGATA CGGATC CGGATG CGGAGA CGGAGC CGGAGT CGGCAC CGGCAT CGGCAG CGGCCA CGGCCT CGGCCG CGGCTA CGGCTC CGGCTG CGGCGA CGGCGC CGGCGT CGGTAC CGGTAT CGGTAG CGGTCA CGGTCT CGGTCG CGGTTA CGGTTC CGGTTG CGGTGA CGGTGC CGGTGT TAACAC TAACAT TAACAG TAACCA TAACCT TAACCG TAACTA TAACTC TAACTG TAACGA TAACGC TAACGT TAATAC TAATAT TAATAG TAATCA TAATCT TAATCG TAATTA TAATTC TAATTG TAATGA TAATGC TAATGT TAAGAC TAAGAT TAAGAG TAAGCA TAAGCT TAAGCG TAAGTA TAAGTC TAAGTG TAAGGA TAAGGC TAAGGT TACAAC TACAAT TACAAG TACACA TACACT TACACG TACATA TACATC TACATG TACAGA TACAGC TACAGT TACTAC TACTAT TACTAG TACTCA TACTCT TACTCG TACTTA TACTTC TACTTG TACTGA TACTGC TACTGT TACGAC TACGAT TACGAG TACGCA TACGCT TACGCG TACGTA TACGTC TACGTG TACGGA TACGGC TACGGT TATAAC TATAAT TATAAG TATACA TATACT TATACG TATATA TATATC TATATG TATAGA TATAGC TATAGT TATCAC TATCAT TATCAG TATCCA TATCCT TATCCG TATCTA TATCTC TATCTG TATCGA TATCGC TATCGT TATGAC TATGAT TATGAG TATGCA TATGCT TATGCG TATGTA TATGTC TATGTG TATGGA TATGGC TATGGT TAGAAC TAGAAT TAGAAG TAGACA TAGACT TAGACG TAGATA TAGATC TAGATG TAGAGA TAGAGC TAGAGT TAGCAC TAGCAT TAGCAG TAGCCA TAGCCT TAGCCG TAGCTA TAGCTC TAGCTG TAGCGA TAGCGC TAGCGT TAGTAC TAGTAT TAGTAG TAGTCA TAGTCT TAGTCG TAGTTA TAGTTC TAGTTG TAGTGA TAGTGC TAGTGT TCACAC TCACAT TCACAG TCACCA TCACCT TCACCG TCACTA TCACTC TCACTG TCACGA TCACGC TCACGT TCATAC TCATAT TCATAG TCATCA TCATCT TCATCG TCATTA TCATTC TCATTG TCATGA TCATGC TCATGT TCAGAC TCAGAT TCAGAG TCAGCA TCAGCT TCAGCG TCAGTA TCAGTC TCAGTG TCAGGA TCAGGC TCAGGT TCCAAC TCCAAT TCCAAG TCCACA TCCACT TCCACG TCCATA TCCATC TCCATG TCCAGA TCCAGC TCCAGT TCCTAC TCCTAT TCCTAG TCCTCA TCCTCT TCCTCG TCCTTA TCCTTC TCCTTG TCCTGA TCCTGC TCCTGT TCCGAC TCCGAT TCCGAG TCCGCA TCCGCT TCCGCG TCCGTA TCCGTC TCCGTG TCCGGA TCCGGC TCCGGT TCTAAC TCTAAT TCTAAG TCTACA TCTACT TCTACG TCTATA TCTATC TCTATG TCTAGA TCTAGC TCTAGT TCTCAC TCTCAT TCTCAG TCTCCA TCTCCT TCTCCG TCTCTA TCTCTC TCTCTG TCTCGA TCTCGC TCTCGT TCTGAC TCTGAT TCTGAG TCTGCA TCTGCT TCTGCG TCTGTA TCTGTC TCTGTG TCTGGA TCTGGC TCTGGT TCGAAC TCGAAT TCGAAG TCGACA TCGACT TCGACG TCGATA TCGATC TCGATG TCGAGA TCGAGC TCGAGT TCGCAC TCGCAT TCGCAG TCGCCA TCGCCT TCGCCG TCGCTA TCGCTC TCGCTG TCGCGA TCGCGC TCGCGT TCGTAC TCGTAT TCGTAG TCGTCA TCGTCT TCGTCG TCGTTA TCGTTC TCGTTG TCGTGA TCGTGC TCGTGT TGACAC TGACAT TGACAG TGACCA TGACCT TGACCG TGACTA TGACTC TGACTG TGACGA TGACGC TGACGT TGATAC TGATAT TGATAG TGATCA TGATCT TGATCG TGATTA TGATTC TGATTG TGATGA TGATGC TGATGT TGAGAC TGAGAT TGAGAG TGAGCA TGAGCT TGAGCG TGAGTA TGAGTC TGAGTG TGAGGA TGAGGC TGAGGT TGCAAC TGCAAT TGCAAG TGCACA TGCACT TGCACG TGCATA TGCATC TGCATG TGCAGA TGCAGC TGCAGT TGCTAC TGCTAT TGCTAG TGCTCA TGCTCT TGCTCG TGCTTA TGCTTC TGCTTG TGCTGA TGCTGC TGCTGT TGCGAC TGCGAT TGCGAG TGCGCA TGCGCT TGCGCG TGCGTA TGCGTC TGCGTG TGCGGA TGCGGC TGCGGT TGTAAC TGTAAT TGTAAG TGTACA TGTACT TGTACG TGTATA TGTATC TGTATG TGTAGA TGTAGC TGTAGT TGTCAC TGTCAT TGTCAG TGTCCA TGTCCT TGTCCG TGTCTA TGTCTC TGTCTG TGTCGA TGTCGC TGTCGT TGTGAC TGTGAT TGTGAG TGTGCA TGTGCT TGTGCG TGTGTA TGTGTC TGTGTG TGTGGA TGTGGC TGTGGT TGGAAC TGGAAT TGGAAG TGGACA TGGACT TGGACG TGGATA TGGATC TGGATG TGGAGA TGGAGC TGGAGT TGGCAC TGGCAT TGGCAG TGGCCA TGGCCT TGGCCG TGGCTA TGGCTC TGGCTG TGGCGA TGGCGC TGGCGT TGGTAC TGGTAT TGGTAG TGGTCA TGGTCT TGGTCG TGGTTA TGGTTC TGGTTG TGGTGA TGGTGC TGGTGT GAACAC GAACAT GAACAG GAACCA GAACCT GAACCG GAACTA GAACTC GAACTG GAACGA GAACGC GAACGT GAATAC GAATAT GAATAG GAATCA GAATCT GAATCG GAATTA GAATTC GAATTG GAATGA GAATGC GAATGT GAAGAC GAAGAT GAAGAG GAAGCA GAAGCT GAAGCG GAAGTA GAAGTC GAAGTG GAAGGA GAAGGC GAAGGT GACAAC GACAAT GACAAG GACACA GACACT GACACG GACATA GACATC GACATG GACAGA GACAGC GACAGT GACTAC GACTAT GACTAG GACTCA GACTCT GACTCG GACTTA GACTTC GACTTG GACTGA GACTGC GACTGT GACGAC GACGAT GACGAG GACGCA GACGCT GACGCG GACGTA GACGTC GACGTG GACGGA GACGGC GACGGT GATAAC GATAAT GATAAG GATACA GATACT GATACG GATATA GATATC GATATG GATAGA GATAGC GATAGT GATCAC GATCAT GATCAG GATCCA GATCCT GATCCG GATCTA GATCTC GATCTG GATCGA GATCGC GATCGT GATGAC GATGAT GATGAG GATGCA GATGCT GATGCG GATGTA GATGTC GATGTG GATGGA GATGGC GATGGT GAGAAC GAGAAT GAGAAG GAGACA GAGACT GAGACG GAGATA GAGATC GAGATG GAGAGA GAGAGC GAGAGT GAGCAC GAGCAT GAGCAG GAGCCA GAGCCT GAGCCG GAGCTA GAGCTC GAGCTG GAGCGA GAGCGC GAGCGT GAGTAC GAGTAT GAGTAG GAGTCA GAGTCT GAGTCG GAGTTA GAGTTC GAGTTG GAGTGA GAGTGC GAGTGT GCACAC GCACAT GCACAG GCACCA GCACCT GCACCG GCACTA GCACTC GCACTG GCACGA GCACGC GCACGT GCATAC GCATAT GCATAG GCATCA GCATCT GCATCG GCATTA GCATTC GCATTG GCATGA GCATGC GCATGT GCAGAC GCAGAT GCAGAG GCAGCA GCAGCT GCAGCG GCAGTA GCAGTC GCAGTG GCAGGA GCAGGC GCAGGT GCCAAC GCCAAT GCCAAG GCCACA GCCACT GCCACG GCCATA GCCATC GCCATG GCCAGA GCCAGC GCCAGT GCCTAC GCCTAT GCCTAG GCCTCA GCCTCT GCCTCG GCCTTA GCCTTC GCCTTG GCCTGA GCCTGC GCCTGT GCCGAC GCCGAT GCCGAG GCCGCA GCCGCT GCCGCG GCCGTA GCCGTC GCCGTG GCCGGA GCCGGC GCCGGT GCTAAC GCTAAT GCTAAG GCTACA GCTACT GCTACG GCTATA GCTATC GCTATG GCTAGA GCTAGC GCTAGT GCTCAC GCTCAT GCTCAG GCTCCA GCTCCT GCTCCG GCTCTA GCTCTC GCTCTG GCTCGA GCTCGC GCTCGT GCTGAC GCTGAT GCTGAG GCTGCA GCTGCT GCTGCG GCTGTA GCTGTC GCTGTG GCTGGA GCTGGC GCTGGT GCGAAC GCGAAT GCGAAG GCGACA GCGACT GCGACG GCGATA GCGATC GCGATG GCGAGA GCGAGC GCGAGT GCGCAC GCGCAT GCGCAG GCGCCA GCGCCT GCGCCG GCGCTA GCGCTC GCGCTG GCGCGA GCGCGC GCGCGT GCGTAC GCGTAT GCGTAG GCGTCA GCGTCT GCGTCG GCGTTA GCGTTC GCGTTG GCGTGA GCGTGC GCGTGT GTACAC GTACAT GTACAG GTACCA GTACCT GTACCG GTACTA GTACTC GTACTG GTACGA GTACGC GTACGT GTATAC GTATAT GTATAG GTATCA GTATCT GTATCG GTATTA GTATTC GTATTG GTATGA GTATGC GTATGT GTAGAC GTAGAT GTAGAG GTAGCA GTAGCT GTAGCG GTAGTA GTAGTC GTAGTG GTAGGA GTAGGC GTAGGT GTCAAC GTCAAT GTCAAG GTCACA GTCACT GTCACG GTCATA GTCATC GTCATG GTCAGA GTCAGC GTCAGT GTCTAC GTCTAT GTCTAG GTCTCA GTCTCT GTCTCG GTCTTA GTCTTC GTCTTG GTCTGA GTCTGC GTCTGT GTCGAC GTCGAT GTCGAG GTCGCA GTCGCT GTCGCG GTCGTA GTCGTC GTCGTG GTCGGA GTCGGC GTCGGT GTTAAC GTTAAT GTTAAG GTTACA GTTACT GTTACG GTTATA GTTATC GTTATG GTTAGA GTTAGC GTTAGT GTTCAC GTTCAT GTTCAG GTTCCA GTTCCT GTTCCG GTTCTA GTTCTC GTTCTG GTTCGA GTTCGC GTTCGT GTTGAC GTTGAT GTTGAG GTTGCA GTTGCT GTTGCG GTTGTA GTTGTC GTTGTG GTTGGA GTTGGC GTTGGT GTGAAC GTGAAT GTGAAG GTGACA GTGACT GTGACG GTGATA GTGATC GTGATG GTGAGA GTGAGC GTGAGT GTGCAC GTGCAT GTGCAG GTGCCA GTGCCT GTGCCG GTGCTA GTGCTC GTGCTG GTGCGA GTGCGC GTGCGT GTGTAC GTGTAT GTGTAG GTGTCA GTGTCT GTGTCG GTGTTA GTGTTC GTGTTG GTGTGA GTGTGC GTGTGT/;

# Sanitize inputs.
die if $file =~ /[\s\;]/;
die if $bedmask =~ /[\s\;]/;

# Preparation.
my $rawFileExt = 'out';
my $closeFileExt = 'out.close';
my $normFileExt = 'outn';

my($prevChrom,$prevprevChrom, $prevStart, $prevprevStart, $prevKey,$prevprevKey, %count, %close, %binary, $snvPairs);
my $cat = 'cat';
if ($file =~ /\.gz$/) {
	$cat = 'gunzip -c';
} elsif ($file =~ /\.bz2$/) {
	$cat = 'bzcat';
} elsif ($file =~ /\.bcf$/) {
	$cat = 'bcftools view';
}
my %filter = (
	'vcf' => "grep -v ^\# | grep -v \"0[\/\|]0\"",
	'bcf' => "grep -v ^\# | grep -v \"0[\/\|]0\"",
	'rcf' => 'grep -v ^\#',
	'masterVar' => 'grep -v no-call',
	'var' => 'grep -v ref | grep -v no-call');
my %fields = (
	'vcf' => '1,2,4,5', 'bcf' => '1,2,4,5', 'rcf' => '1,2,5,6',
	'masterVar' => '3,4,8,9,10', 'var' => '4,5,8,9');

# Process input file.
if ($bedmask && ($format eq 'vcf' || $format eq 'rcf')) {
	open INF, "bedtools intersect -a $file -b $bedmask | $filter{$format} | cut -f$fields{$format} |";
} else {
	open INF, "$cat $file | $filter{$format} | cut -f$fields{$format} |";
}

while (<INF>) {
	chomp;
	my($chrom, $start, $ref, $var, $othervar) = split /\t/;

	# Focus the analysis on autosomes only, excluding sex chromosomes, mitochondrial chromosome, alternative haplotypes, etc.
	next unless $chrom =~ /^(chr)?\d+$/;
	
	# Interpret othervar statement from masterVar.
	$var = $othervar if $othervar && $var eq $ref;
	
	# Pay attention only to SNVs.
	next unless $var =~ /^[ACGT]$/i && $ref =~ /^[ACGT]$/i && uc $var ne uc $ref;
	
	# Compute the key for the current SNV.
	my $key = uc "$ref$var";
	my($D1, $D2, $d) = (0, 0, 0);
	if ($chrom eq $prevChrom && $chrom eq $prevprevChrom) {
		# Compute the distance. The -1 is to shift to base zero for the modulo function.
		$D1 = $start - $prevStart - 1;
		$D2 = $prevStart - $prevprevStart - 1;

		next if $D1<0;
		next if $D2<0;

		if ($dist eq "mean") {
			$d = ($D1 + $D2)/2;
		} elsif ($dist eq "sum") {
			$d = ($D1 + $D2 + 1);
		} elsif($dist eq "max") {
			$d = max($D1, $D2);
		} elsif($dist eq "min") {
			$d = min($D1, $D2);
		}
		
		# Compute the key for the pair.
		my $pairKey = $prevprevKey.$prevKey.$key;
		
		# Add to table, segregating by $C, by pair key and by reduced distance.
		if ($D1<$C || $D2 < $C ) {
			$close{$pairKey}[$d]++;
		} else {
			$binary{$pairKey}[$d % 2]++;
			$count{$_}{$pairKey}[$d % $_]++ foreach @vls;
		}
		$snvPairs++;
	}
	
	# Store info on current SNV for next round.
	$prevprevChrom = $prevChrom;
	$prevChrom = $chrom;
	
	$prevprevStart = $prevStart;
	$prevStart = $start;
	
	$prevprevKey = $prevKey;
	$prevKey = $key;
	
}
close INF;

my $bin = join("", map {$binary{$_}[1]>$binary{$_}[0] ? 1 : 0} @keys);

my @headers = (
	['#software-version', $version],
	['#source', $file],
	['#format', $format],
	['#SNVpairs', $snvPairs],
	['#vectorLengths', join("\t", @vls)],
	['#tooCloseCutoff', $C],
	['#created', `date`],
	);
my $header = join("\n", map {join("\t", @{$_})} @headers);

# Output main fingerprint table.
open OUTF, ">$id.$rawFileExt";
print OUTF $header;
print OUTF "#binary\t$bin\n";
foreach my $vl (@vls) {
	foreach my $key (@keys) {
		print OUTF join("\t", $vl, $key, map {$count{$vl}{$key}[$_] || 0} (0..$vl-1)), "\n";
	}
}
close OUTF;

# Output secondary (short distance) fingerprint table.
open OUTF, ">$id.$closeFileExt";
print OUTF $header;
foreach my $key (@keys) {
	print OUTF join("\t", $key, map {$close{$key}[$_] || 0} (0..$C-1)), "\n";
}
close OUTF;

# Normalize the fingerprints.
foreach my $vl (@vls) {
	# Normalize fingerprint per reduced distance.
	foreach my $col (0..$vl-1) {
		my @v = ();
		push @v, $count{$vl}{$_}[$col] foreach @keys;
		my($avg, $std) = avgstd(\@v);
		$std ||= 1;
		$count{$vl}{$_}[$col] = ($count{$vl}{$_}[$col]-$avg)/$std foreach @keys;
	}
	# Normalize fingerprint per SNV pair key.
	foreach my $sig (@keys) {
		my($avg, $std) = avgstd($count{$vl}{$sig});
		$std ||= 1;
		$_ = ($_-$avg)/$std foreach @{$count{$vl}{$sig}};
	}
}

# Output normalized fingerprint table.
open OUTF, ">$id.$normFileExt";
print OUTF $header;
print OUTF "#binary\t$bin\n";
foreach my $vl (@vls) {
	foreach my $key (@keys) {
		print OUTF join("\t", $vl, $key, map {sprintf("%.3f", $_)} @{$count{$vl}{$key}}), "\n";
	}
}
close OUTF;

# Compress output files.
`gzip -f $id.$rawFileExt; gzip -f $id.$closeFileExt; gzip -f $id.$normFileExt`;


###
sub avgstd {
	my($values) = @_;
	my($sum, $devsqsum);

	my $n = scalar @$values;
	return unless $n>1;
	$sum += $_ foreach @$values;
	my $avg = $sum / $n;
	$devsqsum += ($_-$avg)**2 foreach @$values;
	my $std = sqrt($devsqsum/($n-1));
	return $avg, $std;
}
